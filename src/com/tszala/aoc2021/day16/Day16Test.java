package com.tszala.aoc2021.day16;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;

public class Day16Test {

    @Test
    void shouldParseZeroAsLiteral() {
        String input
        Day16.LiteralPacket literalPacket = Day16.PacketFactory.literalPacket(input);
        Assertions.assertEquals("100", literalPacket.type);
        Assertions.assertEquals("110", literalPacket.version);
        Assertions.assertEquals("1000000001", literalPacket.literalAsBinaryString());
        Assertions.assertEquals("1101001000000001",literalPacket.asBinary());
        Assertions.assertEquals("1101001000000001",literalPacket.asBinaryFilled());
    }

    @Test
    void shouldParseLiteral() {
        String input = "110100101111111000101000";
        Day16.LiteralPacket literalPacket = Day16.PacketFactory.literalPacket(input);
        Assertions.assertEquals("100", literalPacket.type);
        Assertions.assertEquals("110", literalPacket.version);
        Assertions.assertEquals("011111100101", literalPacket.literal);

        Assertions.assertEquals("110100101111111000101000",literalPacket.asBinaryFilled());
        Assertions.assertEquals("110100101111111000101",literalPacket.asBinary());
    }

    @Test
    void shouldParseOperatorWithLength() {
        String input = "00111000000000000110111101000101001010010001001000000000";
        Day16.OperatorPacket literalPacket = Day16.PacketFactory.operatorPacket(input);
        Assertions.assertEquals("001", literalPacket.version);
        Assertions.assertEquals("110", literalPacket.type);
        Assertions.assertEquals("0", literalPacket.lengthType);
        Assertions.assertEquals("000000000011011", literalPacket.length);
        Assertions.assertEquals("110100010100101001000100100", literalPacket.subPacketString);

        Assertions.assertEquals("00111000000000000110111101000101001010010001001000000000",literalPacket.asBinaryFilled());
        Assertions.assertEquals("0011100000000000011011110100010100101001000100100",literalPacket.asBinary());
    }

    @Test
    void shouldParseOperatorWithPacketCount() {
        String input = "11101110000000001101010000001100100000100011000001100000";
        Day16.OperatorPacket literalPacket = Day16.PacketFactory.operatorPacket(input);
        Assertions.assertEquals("111", literalPacket.version);
        Assertions.assertEquals("011", literalPacket.type);
        Assertions.assertEquals("1", literalPacket.lengthType);
        Assertions.assertEquals("00000000011", literalPacket.length);
        Assertions.assertEquals("010100000011001000001000110000011", literalPacket.subPacketString);

        Assertions.assertEquals("11101110000000001101010000001100100000100011000001100000",literalPacket.asBinaryFilled());
        Assertions.assertEquals("111011100000000011010100000011001000001000110000011",literalPacket.asBinary());
    }

    @Test
    void shouldDecodeTwoPackets() {
        String input = "11101110000000001101010000001100100000100011000001100000110100101111111000101000";
        List<Day16.Packet> packets = Day16.PacketFactory.decode(input, new ArrayList<>());
        Assertions.assertEquals(2, packets.size());
    }

    @Test
    void shouldDecodeThreePackets() {
        String input = "1110111000000000110101000000110010000010001100000110000011010010111111100010100000111000000000000110111101000101001010010001001000000000";
        List<Day16.Packet> packets = Day16.PacketFactory.decode(input, new ArrayList<>());
        Assertions.assertEquals(3, packets.size());
    }

    @Test
    void shouldDecodeNestedOperatorPackets() {
        String input = Day16.hexToBinaryString("8A004A801A8002F478");
        List<Day16.Packet> packets = Day16.PacketFactory.decode(input, new ArrayList<>());

        Assertions.assertEquals(1, packets.size());
        Assertions.assertEquals(16, packets.get(0).getVersionSumAsInt());
        Assertions.assertEquals(input, packets.get(0).asBinaryFilled());
    }

    @Test
    void shouldFindSum() {
        String input = Day16.hexToBinaryString("C200B40A82");
        List<Day16.Packet> packets = Day16.PacketFactory.decode(input, new ArrayList<>());
        Assertions.assertEquals(3, packets.get(0).value());
    }

    @Test
    void shouldFindProduct() {
        String input = Day16.hexToBinaryString("04005AC33890");
        List<Day16.Packet> packets = Day16.PacketFactory.decode(input, new ArrayList<>());
        Assertions.assertEquals(54, packets.get(0).value());
    }

}
